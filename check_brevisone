#!/usr/bin/env python3
# COPYRIGHT:
#
# This software is Copyright (c) 2018 NETWAYS GmbH, Matthias Jentsch
#                                <support@netways.de>
#
# (Except where explicitly superseded by other copyright notices)
#
# LICENSE:
#
# Copyright (C) 2020 NETWAYS GmbH <info@netways.de>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
# or see <http://www.gnu.org/licenses/>.
#
# CONTRIBUTION SUBMISSION POLICY:
#
# (The following paragraph is not intended to limit the rights granted
# to you to modify and distribute this software under the terms of
# the GNU General Public License and is only of importance to you if
# you choose to contribute your changes and enhancements to the
# community by submitting them to NETWAYS GmbH.)
#
# By intentionally submitting any modifications, corrections or
# derivatives to this work, or any other work intended for use with
# this Software, to NETWAYS GmbH, you confirm that
# you are the copyright holder for those contributions and you grant
# NETWAYS GmbH a nonexclusive, worldwide, irrevocable,
# royalty-free, perpetual, license to use, copy, create derivative
# works based on those contributions, and sublicense and distribute
# those contributions and any derivatives thereof.

from argparse import ArgumentParser
import urllib.request
from urllib.parse import urljoin
import ssl
import sys


# Return code level
# 0 - OK       - The plugin was able to check the service and it appeared to be functioning properly
# 1 - WARNING  - The plugin was able to check the service, but it appeared to be above some "warning"
#                threshold or did not appear to be working properly
# 2 - CRITICAL - The plugin detected that either the service was not running or it was above some "critical" threshold
# 3 - UNKNOWN  - Invalid command line arguments were supplied to the plugin or low-level failures
OK = 0
WARNING = 1
CRITICAL = 2
UNKNOWN = 3

__version__ = '3.0.0'


def read_int(string):
    """
    Get and sanitize integer data
    """
    try:
        return int(string.split(':')[1])
    except ValueError:
        return 0


def read_signal(string):
    """
    Get and sanitize the signal data
    """
    sig = ':'.join(string.split(':')[1:]).strip()
    sig = sig.replace('db', '').replace('dBm', '').strip()

    try:
        return int(sig)
    except ValueError:
        return 0


def generate_output(status='UNKNOWN', lines=None, perfdata=None):
    """
    Generate plugin data output with status and perfdata
    """

    pluginoutput = str(status)

    # All lines we received from the Endpoint
    if lines:
        pluginoutput += ' - ' + ' '.join(lines)

    # Perfdata we explicitly extracted from the data
    # The perfdata var should be a dict, we normalize the keys and
    # transform everything into the expected output 'key 1': 3 > key_1=3
    if perfdata:
        pluginoutput += '|' + ' '.join([key.lower().replace(" ", "_").replace(",", "") + '=' + str(value) for key, value in perfdata.items()])

    print(pluginoutput)


def commandline(args):
    """
    Parse commandline arguments.
    """
    parser = ArgumentParser(description= "check_brevisone (Version: %s)" % (__version__))

    parser.add_argument('-V', '--version', action='version', version='check_brevisone' + __version__)

    parser.add_argument('-H', '--hostname', help='The host address of the SMS gateway', required=True)
    parser.add_argument('-T', '--timeout', help='Seconds before connection times out (default 10)',
                        default=10,
                        type=int)
    parser.add_argument('-Q', '--queue', help='The warning threshold for the amount of queued SMS (default 1)',
                        default=1,
                        type=int)
    parser.add_argument('-F', '--fail', help='The critical threshold for failed SMS (default 1)', default=1, type=int)
    parser.add_argument('--signal-warning',
                        help='The warning threshold for the minimum signal strength (in db, default -91)',
                        default=-91,
                        type=int)
    parser.add_argument('--signal-critical',
                        help='The critical threshold for the minimum signal strength (in db, default -107)',
                        default=-107,
                        type=int)
    parser.add_argument('--ssl-insecure',
                        dest='insecure',
                        action='store_true',
                        default=False,
                        help='Allow insecure SSL connections (default False)')
    parser.add_argument('--protocol',
                        choices=["http", "https"],
                        default='https',
                        help='HTTP protocol, use one of http or https (default https)')

    return parser.parse_args(args)


def get_data(base_url, timeout, insecure):
    """
    Requests the data via HTTP. Basically a wrapper around urllib.

    What we expect from the server:

    HTTP/1.0 200 OK
    que: foo
    failed: 0
    signal_strength: 15 db
    total: 25
    """

    # Default context for connection
    ctx = ssl.create_default_context()
    if insecure is True:
        ctx.check_hostname = False
        ctx.verify_mode = ssl.CERT_NONE

    # Example URL: https://mybrevisone/check.php
    url = urljoin(base_url, "check.php")
    response = urllib.request.urlopen(url=url, timeout=timeout, context=ctx) # pylint: disable=consider-using-with

    if response.getcode() >= 400:
        raise RuntimeError("Could not get response")

    # We expect at least the que name otherwise we
    # assume none of the data got sent
    resp = response.read().decode()
    if "que:" not in resp:
        raise RuntimeError("Invalid response")

    return resp

def extract_perfdata(lines):
    """
    Safely extract perfdata
    """
    if len(lines) < 4:
        return None

    perfdata = {
        'que': read_int(lines[0]),
        'failed': read_int(lines[1]),
        'signal': read_signal(lines[2]),
        'total': read_int(lines[3])
    }

    return perfdata

def main(args):
    try:
        base_url = args.protocol + '://' + args.hostname
        data = get_data(base_url=base_url,
                        timeout=args.timeout,
                        insecure=args.insecure)
    except Exception as data_exc: # pylint: disable=broad-except
        print('UNKNOWN - Could not connect to SMS Gateway', data_exc)
        return UNKNOWN

    # Split up lines and clean up items
    lines = [str(i).strip() for i in data.split("\n") if i]
    # Safely extract perfdata, which we'll also use to determine the final status
    perfdata = extract_perfdata(lines)

    if not perfdata:
        print('UNKNOWN - Could not determine status', perfdata)
        return UNKNOWN

    # Determine the final status
    if perfdata['failed'] >= args.fail or perfdata['signal'] <= args.signal_critical:
        generate_output(status='CRITICAL', lines=lines, perfdata=perfdata)
        return CRITICAL

    if perfdata['que'] >= args.queue or perfdata['signal'] <= args.signal_warning:
        generate_output(status='WARNING', lines=lines, perfdata=perfdata)
        return WARNING

    generate_output(status='OK', lines=lines, perfdata=perfdata)
    return OK


if __name__ == '__main__': # pragma: no cover
    try:
        ARGS = commandline(sys.argv[1:])
        sys.exit(main(ARGS))
    except SystemExit:
        # Re-throw the exception
        raise sys.exc_info()[1].with_traceback(sys.exc_info()[2]) # pylint: disable=raise-missing-from
    except:
        print("UNKNOWN - Error: %s" % (str(sys.exc_info()[1])))
        sys.exit(3)
